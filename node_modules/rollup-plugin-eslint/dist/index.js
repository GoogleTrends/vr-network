'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rollupPluginutils = require('rollup-pluginutils');

var _eslint = require('eslint');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function normalizePath(id) {
    return _path2.default.relative(process.cwd(), id).split(_path2.default.sep).join('/');
}

module.exports = function eslint() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var cli = new _eslint.CLIEngine(options);
    var formatter = options.formatter;

    if (typeof formatter !== 'function') {
        formatter = cli.getFormatter(formatter || 'stylish');
    }

    var filter = (0, _rollupPluginutils.createFilter)(options.include, options.exclude || /node_modules/);

    return {
        name: 'eslint',

        transform(code, id) {
            var file = normalizePath(id);
            if (cli.isPathIgnored(file) || !filter(id)) {
                return null;
            }

            var report = cli.executeOnText(code, file);
            var hasWarnings = options.throwOnWarning && report.warningCount !== 0;
            var hasErrors = options.throwOnError && report.errorCount !== 0;

            if (report.warningCount === 0 && report.errorCount === 0) {
                return null;
            }

            var result = formatter(report.results);

            if (result) {
                console.log(result);
            }

            if (hasWarnings && hasErrors) {
                throw Error('Warnings or errors were found');
            }

            if (hasWarnings) {
                throw Error('Warnings were found');
            }

            if (hasErrors) {
                throw Error('Errors were found');
            }
        }
    };
};